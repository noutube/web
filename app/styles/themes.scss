$black: #000;
$shadow: rgba($black, 0.5);

$solarized: (
  base03: #002b36,
  base02: #073642,
  base01: #586e75,
  base00: #657b83,
  base0: #839496,
  base1: #93a1a1,
  base2: #eee8d5,
  base3: #fdf6e3,
  _yellow: #b58900,
  _orange: #cb4b16,
  _red: #dc322f,
  _magenta: #d33682,
  _violet: #6c71c4,
  _blue: #268bd2,
  _cyan: #2aa198,
  _green: #859900
);

$gruvbox: (
  dark0_hard: #1d2021,
  dark0: #282828,
  dark0_soft: #32302f,
  dark1: #3c3836,
  dark2: #504945,
  dark3: #665c54,
  dark4: #7c6f64,
  gray_245: #928374,
  gray_244: #928374,
  light0_hard: #f9f5d7,
  light0: #fbf1c7,
  light0_soft: #f2e5bc,
  light1: #ebdbb2,
  light2: #d5c4a1,
  light3: #bdae93,
  light4: #a89984,
  bright_red: #fb4934,
  bright_green: #b8bb26,
  bright_yellow: #fabd2f,
  bright_blue: #83a598,
  bright_purple: #d3869b,
  bright_aqua: #8ec07c,
  bright_orange: #fe8019,
  neutral_red: #cc241d,
  neutral_green: #98971a,
  neutral_yellow: #d79921,
  neutral_blue: #458588,
  neutral_purple: #b16286,
  neutral_aqua: #689d6a,
  neutral_orange: #d65d0e,
  faded_red: #9d0006,
  faded_green: #79740e,
  faded_yellow: #b57614,
  faded_blue: #076678,
  faded_purple: #8f3f71,
  faded_aqua: #427b58,
  faded_orange: #af3a03
);

$themes: (
  light: (
    bg: map.get($solarized, base3),
    bg-hi: map.get($solarized, base2),
    sec: map.get($solarized, base1),
    pri: map.get($solarized, base00),
    emph: map.get($solarized, base01),
    link: map.get($solarized, _violet),
    bar: map.get($solarized, _blue),
    error: map.get($solarized, _red),
    warn: map.get($solarized, _orange)
  ),
  dark: (
    bg: map.get($solarized, base03),
    bg-hi: map.get($solarized, base02),
    sec: map.get($solarized, base01),
    pri: map.get($solarized, base0),
    emph: map.get($solarized, base1),
    link: map.get($solarized, _violet),
    bar: map.get($solarized, _blue),
    error: map.get($solarized, _red),
    warn: map.get($solarized, _orange)
  ),
  gruvbox-light: (
    bg: map.get($gruvbox, light0),
    bg-hi: map.get($gruvbox, light1),
    sec: map.get($gruvbox, dark4),
    pri: map.get($gruvbox, dark1),
    emph: map.get($gruvbox, dark0),
    link: map.get($gruvbox, neutral_yellow),
    bar: map.get($gruvbox, neutral_red),
    error: map.get($gruvbox, bright_red),
    warn: map.get($gruvbox, neutral_orange)
  ),
  gruvbox-dark: (
    bg: map.get($gruvbox, dark0),
    bg-hi: map.get($gruvbox, dark1),
    sec: map.get($gruvbox, light4),
    pri: map.get($gruvbox, light1),
    emph: map.get($gruvbox, light0),
    link: map.get($gruvbox, neutral_yellow),
    bar: map.get($gruvbox, neutral_red),
    error: map.get($gruvbox, bright_red),
    warn: map.get($gruvbox, neutral_orange)
  )
);

@mixin theme($properties, $self: false) {
  @each $name, $theme in $themes {
    #{selector-self($self, '.theme--#{$name}')} {
      @each $property, $args in $properties {
        $key: list.nth($args, 1);
        // default to first argument
        $value: $key;
        // look up value from theme if defined
        @if map.has-key($theme, $key) {
          $value: map.get($theme, $key);
        }
        // process with function if passed
        @if list.length($args) == 2 {
          $function: list.nth($args, 2);
          $value: meta.call($function, $value);
        }
        // fail if not valid
        @if not $value {
          @error 'could not resolve #{$args} in #{$name} to a value for #{$property}';
        }

        #{$property}: $value;
      }
    }
  }
}

@function selector-self($self, $selector) {
  @return if($self, '&#{$selector}', '#{$selector} &');
}
